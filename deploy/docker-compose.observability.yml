services:
  postgres:
    image: postgres:15-alpine
    environment:
      - POSTGRES_USER=${PGUSER}
      - POSTGRES_PASSWORD=${PGPASSWORD}
      - POSTGRES_DB=${PGDATABASE}
    volumes:
      - ./pgdata:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U laimonas -d crypto_signals" ]
  otel-collector:
    image: otel/opentelemetry-collector-contrib:0.99.0
    command: ["--config=/etc/otel/collector-config.yaml"]
    volumes:
      - ./otel/collector-config.yaml:/etc/otel/collector-config.yaml
    env_file:
      - ./otel/env.example
    ports:
      - '4317:4317'
      - '4318:4318'
      - '8888:8888'
      - '8889:8889'
  loki:
    image: grafana/loki:2.9.0
    command: ["-config.file=/etc/loki/config.yaml"]
    volumes:
      - ./loki/loki-config.yaml:/etc/loki/config.yaml
      - loki-data:/loki
    ports:
      - '3100:3100'
  # promtail (optional if not using filelog receiver)
  # promtail:
  #   image: grafana/promtail:2.9.0
  #   volumes:
  #     - ./promtail/promtail-config.yaml:/etc/promtail/config.yaml
  #     - ../logs:/var/log/app
  #   command: ["-config.file=/etc/promtail/config.yaml"]
  deploy-api:
    build:
      context: ..
      dockerfile: Dockerfile
    image: crypto-signals/deploy-api:local
    env_file:
      - ./deploy/.env
    environment:
      NODE_ENV: production
      OTEL_EXPORTER_OTLP_ENDPOINT: http://otel-collector:4318/v1/traces
      DEPLOY_ENV: development
      SERVICE_NAMESPACE: crypto-signals
      PGHOST: postgres
      PGPORT: 5432
      PGUSER: ${PGUSER}
      PGPASSWORD: ${PGPASSWORD}
      PGDATABASE: ${PGDATABASE}
    volumes:
      - ../logs:/app/logs
    depends_on:
      otel-collector:
        condition: service_started
      loki:
        condition: service_started
      postgres:
        condition: service_healthy
    ports:
      - '3000:3000'
  alertmanager:
    image: prom/alertmanager:latest
    container_name: alertmanager
    ports:
      - '9093:9093'
    volumes:
      - ./alertmanager:/etc/alertmanager
    command: ["--config.file=/etc/alertmanager/alertmanager.yml","--config.expand-env"]
    environment:
      TELEGRAM_BOT_TOKEN: ${TELEGRAM_BOT_TOKEN}
      TELEGRAM_PRIVATE_CHAT_ID: ${TELEGRAM_PRIVATE_CHAT_ID}
    env_file:
      - ../.env.observability
  prometheus:
    image: prom/prometheus
    command: [ '--config.file=/etc/prometheus/prometheus.yml','--web.enable-lifecycle' ]
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - ./prometheus/alerts.yml:/etc/prometheus/alerts.yml
      - ./prometheus/recording-rules.yml:/etc/prometheus/recording-rules.yml
      - ./prometheus/alerts-burnrate.yml:/etc/prometheus/alerts-burnrate.yml
      - ./prometheus/rules:/etc/prometheus/rules
    ports:
      - '9090:9090'
    depends_on:
      - alertmanager
  grafana:
    image: grafana/grafana
    ports:
      - '3001:3000'
    depends_on:
      - prometheus
    volumes:
      - ./grafana/provisioning:/etc/grafana/provisioning
volumes:
  loki-data:
  # logs volume for deploy-api container
  # host path ../logs mounted
